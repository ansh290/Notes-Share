public with sharing class PeopleController {

    // ---------------------------
    // WRAPPERS
    // ---------------------------
    public class PeopleWrapper {
        @AuraEnabled public Id userId;
        @AuraEnabled public String name;           
        @AuraEnabled public String contactName;    
        @AuraEnabled public String photoUrl;
        @AuraEnabled public String chapterName;   
        @AuraEnabled public List<String> hostelNames; 
        @AuraEnabled public Boolean isFollowed;

        public PeopleWrapper(Id uId, String uName, String cName, String uPhoto, String chName, List<String> hNames, Boolean followed) {
            userId = uId;
            name = uName;
            contactName = cName;
            photoUrl = uPhoto;
            chapterName = chName;
            hostelNames = hNames == null ? new List<String>() : hNames;
            isFollowed = followed;
        }
    }

    public class HostelWrapper {
        @AuraEnabled public Id hostelMasterId;
        @AuraEnabled public String hostelName;
        public HostelWrapper(Id id, String name) { 
            hostelMasterId = id; 
            hostelName = name; 
        }
    }

    public class ChapterWrapper {
        @AuraEnabled public Id chapterMasterId;
        @AuraEnabled public String chapterName;
        public ChapterWrapper(Id id, String name) { 
            chapterMasterId = id; 
            chapterName = name; 
        }
    }

    // ---------------------------
    // PUBLIC: Default users (no filters)
    // ---------------------------
    @AuraEnabled(cacheable=true)
    public static List<PeopleWrapper> getCustomerUsers() {
        List<User> users = [
            SELECT Id, Name, SmallPhotoUrl, ContactId, Contact.Name, 
                   Contact.Chapter__c, Contact.Chapter__r.Name,
                   Contact.Hostel__c, Contact.Hostel__r.Name
            FROM User
            WHERE IsActive = true
            AND Profile.UserLicense.Name = 'Customer Community'
            AND Id != :UserInfo.getUserId()
            AND ContactId != NULL
            ORDER BY Contact.Name ASC NULLS LAST
            LIMIT 6
        ];
        return buildWrappersFromUsers(users);
    }

    // ---------------------------
    // PUBLIC: Search users with filters
    // ---------------------------
    @AuraEnabled(cacheable=false)
    public static List<PeopleWrapper> getSearchUsers(String searchKey, Id chapterId, Id hostelId) {
        String baseQuery = 'SELECT Id, Name, SmallPhotoUrl, ContactId, Contact.Name, ' +
                           'Contact.Chapter__c, Contact.Chapter__r.Name, ' +
                           'Contact.Hostel__c, Contact.Hostel__r.Name ' +
                           'FROM User WHERE IsActive = true AND Profile.UserLicense.Name = \'Customer Community\' ' +
                           'AND Id != \'' + UserInfo.getUserId() + '\' AND ContactId != NULL';

        if (String.isNotBlank(searchKey)) {
            String key = '%' + searchKey.trim() + '%';
            baseQuery += ' AND (Name LIKE \'' + String.escapeSingleQuotes(key) + 
                         '\' OR CommunityNickname LIKE \'' + String.escapeSingleQuotes(key) + 
                         '\' OR Contact.Name LIKE \'' + String.escapeSingleQuotes(key) + '\')';
        }

        baseQuery += ' ORDER BY Contact.Name ASC NULLS LAST LIMIT 200';
        List<User> users = Database.query(baseQuery);

        List<User> filtered = new List<User>();
        for (User u : users) {
            if (u.ContactId == null) continue;

            Boolean match = true;
            if (chapterId != null && u.Contact.Chapter__c != chapterId) match = false;
            if (hostelId != null && u.Contact.Hostel__c != hostelId) match = false;

            if (match) filtered.add(u);
        }

        return buildWrappersFromUsers(filtered);
    }
      
    // ---------------------------
    // Follow / Unfollow
    // ---------------------------
    @AuraEnabled
    public static void followUser(Id targetUserId) {
        if (targetUserId == null || targetUserId == UserInfo.getUserId()) return;

        List<EntitySubscription> existing = [
            SELECT Id FROM EntitySubscription
            WHERE SubscriberId = :UserInfo.getUserId()
            AND ParentId = :targetUserId
            LIMIT 1
        ];
        
        if (existing.isEmpty()) {
            EntitySubscription newSub = new EntitySubscription(
                SubscriberId = UserInfo.getUserId(),
                ParentId     = targetUserId
            );
            
            Id networkId = Network.getNetworkId();
            if (networkId != null) {
                newSub.NetworkId = networkId;
            }
            
            insert newSub;
        }
    }

    @AuraEnabled
    public static void unfollowUser(Id targetUserId) {
        if (targetUserId == null) return;
        
        List<EntitySubscription> subs = [
            SELECT Id FROM EntitySubscription
            WHERE SubscriberId = :UserInfo.getUserId()
            AND ParentId = :targetUserId
            LIMIT 1
        ];
        
        if (!subs.isEmpty()) {
            delete subs;
        }
    }

    // ---------------------------
    // PUBLIC: Get Hostels for dropdown
    // ---------------------------
    @AuraEnabled(cacheable=true)
    public static List<HostelWrapper> getHostels() {
        List<HostelWrapper> result = new List<HostelWrapper>();
        if (!Schema.getGlobalDescribe().containsKey('Hostel_Detail__c')) return result;

        for (Hostel_Detail__c h : [
            SELECT Id, Name 
            FROM Hostel_Detail__c 
            ORDER BY Name ASC 
            LIMIT 2000
        ]) {
            result.add(new HostelWrapper(h.Id, h.Name));
        }
        return result;
    }

    // ---------------------------
    // PUBLIC: Get Chapters for dropdown
    // ---------------------------
    @AuraEnabled(cacheable=true)
    public static List<ChapterWrapper> getChapters() {
        List<ChapterWrapper> result = new List<ChapterWrapper>();
        if (!Schema.getGlobalDescribe().containsKey('Chapter__c')) return result;

        for (Chapter__c c : [
            SELECT Id, Name 
            FROM Chapter__c 
            ORDER BY Name ASC 
            LIMIT 2000
        ]) {
            result.add(new ChapterWrapper(c.Id, c.Name));
        }
        return result;
    }

    // ---------------------------
    // PRIVATE HELPERS
    // ---------------------------
    private static List<PeopleWrapper> buildWrappersFromUsers(List<User> users) {
        List<PeopleWrapper> result = new List<PeopleWrapper>();
        if (users == null || users.isEmpty()) return result;

        Set<Id> followedUserIds = new Set<Id>();
        try {
            for (EntitySubscription subscription : [
                SELECT ParentId FROM EntitySubscription 
                WHERE SubscriberId = :UserInfo.getUserId() 
                LIMIT 1000
            ]) {
                followedUserIds.add(subscription.ParentId);
            }
        } catch (Exception ex) {
            System.debug('Error loading followed users: ' + ex.getMessage());
        }

        for (User user : users) {
            String contactName = user.Contact != null ? user.Contact.Name : user.Name;
            String chapterName = (user.Contact != null && user.Contact.Chapter__r != null) 
                                 ? user.Contact.Chapter__r.Name : null;
            List<String> hostelNames = new List<String>();
            if (user.Contact != null && user.Contact.Hostel__r != null) {
                hostelNames.add(user.Contact.Hostel__r.Name);
            }

            result.add(new PeopleWrapper(
                user.Id,
                user.Name,
                contactName,
                user.SmallPhotoUrl,
                chapterName,
                hostelNames,
                followedUserIds.contains(user.Id)
            ));
        }

        return result;
    }
}
