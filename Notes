
@isTest
private class CampaignMemberTriggerTest {
    
    @testSetup
    static void setupTestData() {
        // Create test accounts
        List<Account> testAccounts = new List<Account>();
        for (Integer i = 0; i < 3; i++) {
            testAccounts.add(new Account(
                Name = 'Test Account ' + i
            ));
        }
        insert testAccounts;
        
        // Create test contacts
        List<Contact> testContacts = new List<Contact>();
        for (Integer i = 0; i < 6; i++) {
            testContacts.add(new Contact(
                FirstName = 'Test',
                LastName = 'Contact ' + i,
                AccountId = testAccounts[Math.mod(i, 3)].Id
            ));
        }
        insert testContacts;
        
        // Create test campaigns
        List<Campaign> testCampaigns = new List<Campaign>();
        for (Integer i = 0; i < 2; i++) {
            testCampaigns.add(new Campaign(
                Name = 'Test Campaign ' + i,
                IsActive = true
            ));
        }
        insert testCampaigns;
        
        // Create test opportunities in 'Build Value' stage
        List<Opportunity> testOpportunities = new List<Opportunity>();
        Date today = Date.today();
        for (Integer i = 0; i < 3; i++) {
            testOpportunities.add(new Opportunity(
                Name = 'Test Opp ' + i,
                AccountId = testAccounts[i].Id,
                StageName = 'Build Value',
                CloseDate = today.addDays(30),
                Amount = 10000
            ));
        }
        insert testOpportunities;
        
        // Create one opportunity not in 'Build Value' stage (for negative test)
        Opportunity nonBuildValueOpp = new Opportunity(
            Name = 'Non Build Value Opp',
            AccountId = testAccounts[0].Id,
            StageName = 'Prospecting',
            CloseDate = today.addDays(30),
            Amount = 5000
        );
        insert nonBuildValueOpp;
    }
    
    // Test case 1: CampaignMember with Status = 'Responded' and valid ContactId
    @isTest
    static void testCampaignMemberRespondedWithValidContact() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        Contact testContact = [SELECT Id, AccountId FROM Contact WHERE LastName = 'Contact 0' LIMIT 1];
        Opportunity testOpp = [SELECT Id FROM Opportunity WHERE Name = 'Test Opp 0' LIMIT 1];
        
        Test.startTest();
        
        // Create CampaignMember with Status = 'Responded'
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            ContactId = testContact.Id,
            Status = 'Responded'
        );
        insert cm;
        
        Test.stopTest();
        
        // Verify CampaignInfluence was created
        List<CampaignInfluence> influences = [
            SELECT Id, OpportunityId, CampaignId, ContactId, Influence 
            FROM CampaignInfluence 
            WHERE ContactId = :testContact.Id
        ];
        
        System.assertEquals(1, influences.size(), 'Should create one CampaignInfluence record');
        System.assertEquals(testOpp.Id, influences[0].OpportunityId, 'Should link to correct Opportunity');
        System.assertEquals(testCampaign.Id, influences[0].CampaignId, 'Should link to correct Campaign');
        System.assertEquals(30, influences[0].Influence, 'Influence should be 30');
    }
    
    // Test case 2: CampaignMember with Status != 'Responded' (should not trigger)
    @isTest
    static void testCampaignMemberNotResponded() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        Contact testContact = [SELECT Id FROM Contact WHERE LastName = 'Contact 0' LIMIT 1];
        
        Test.startTest();
        
        // Create CampaignMember with Status != 'Responded'
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            ContactId = testContact.Id,
            Status = 'Sent'
        );
        insert cm;
        
        Test.stopTest();
        
        // Verify no CampaignInfluence was created
        List<CampaignInfluence> influences = [
            SELECT Id FROM CampaignInfluence 
            WHERE ContactId = :testContact.Id
        ];
        
        System.assertEquals(0, influences.size(), 'Should not create CampaignInfluence for non-responded status');
    }
    
    // Test case 3: CampaignMember without ContactId (should not trigger)
    @isTest
    static void testCampaignMemberWithoutContactId() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        
        Test.startTest();
        
        // Create CampaignMember without ContactId (LeadId instead)
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            Status = 'Responded'
            // No ContactId - should not trigger
        );
        insert cm;
        
        Test.stopTest();
        
        // Verify no CampaignInfluence was created
        List<CampaignInfluence> influences = [SELECT Id FROM CampaignInfluence];
        System.assertEquals(0, influences.size(), 'Should not create CampaignInfluence without ContactId');
    }
    
    // Test case 4: Contact without Account (should not trigger)
    @isTest
    static void testContactWithoutAccount() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        
        // Create contact without account
        Contact noAccountContact = new Contact(
            FirstName = 'No',
            LastName = 'Account',
            Email = 'noaccount@test.com'
        );
        insert noAccountContact;
        
        Test.startTest();
        
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            ContactId = noAccountContact.Id,
            Status = 'Responded'
        );
        insert cm;
        
        Test.stopTest();
        
        // Verify no CampaignInfluence was created
        List<CampaignInfluence> influences = [
            SELECT Id FROM CampaignInfluence 
            WHERE ContactId = :noAccountContact.Id
        ];
        
        System.assertEquals(0, influences.size(), 'Should not create CampaignInfluence for contact without account');
    }
    
    // Test case 5: No opportunities in 'Build Value' stage (should not trigger)
    @isTest
    static void testNoBuildValueOpportunities() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        
        // Create account without opportunities in 'Build Value' stage
        Account noBuildValueAccount = new Account(Name = 'No Build Value Account');
        insert noBuildValueAccount;
        
        Contact testContact = new Contact(
            FirstName = 'Test',
            LastName = 'No Build Value',
            AccountId = noBuildValueAccount.Id
        );
        insert testContact;
        
        Test.startTest();
        
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            ContactId = testContact.Id,
            Status = 'Responded'
        );
        insert cm;
        
        Test.stopTest();
        
        // Verify no CampaignInfluence was created
        List<CampaignInfluence> influences = [
            SELECT Id FROM CampaignInfluence 
            WHERE ContactId = :testContact.Id
        ];
        
        System.assertEquals(0, influences.size(), 'Should not create CampaignInfluence without Build Value opportunities');
    }
    
    // Test case 6: Opportunity created date outside 90-day window (should not trigger)
    @isTest
    static void testOpportunityOutside90DayWindow() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        Contact testContact = [SELECT Id, AccountId FROM Contact WHERE LastName = 'Contact 0' LIMIT 1];
        Opportunity testOpp = [SELECT Id, CreatedDate FROM Opportunity WHERE Name = 'Test Opp 0' LIMIT 1];
        
        Test.startTest();
        
        // Create CampaignMember with future created date (outside 90-day window)
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            ContactId = testContact.Id,
            Status = 'Responded'
        );
        
        // Use Test.setCreatedDate to simulate old campaign member
        insert cm;
        
        // Set the created date to be more than 90 days before the opportunity
        Test.setCreatedDate(cm.Id, testOpp.CreatedDate.addDays(-91));
        
        Test.stopTest();
        
        // Verify no CampaignInfluence was created (outside date range)
        List<CampaignInfluence> influences = [
            SELECT Id FROM CampaignInfluence 
            WHERE ContactId = :testContact.Id
        ];
        
        System.assertEquals(0, influences.size(), 'Should not create CampaignInfluence outside 90-day window');
    }
    
    // Test case 7: Influence sum would exceed 100% (should not trigger)
    @isTest
    static void testInfluenceSumExceeds100() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        Contact testContact = [SELECT Id, AccountId FROM Contact WHERE LastName = 'Contact 0' LIMIT 1];
        Opportunity testOpp = [SELECT Id FROM Opportunity WHERE Name = 'Test Opp 0' LIMIT 1];
        
        // Create existing CampaignInfluence with 80% influence
        CampaignInfluence existingInfluence = new CampaignInfluence(
            OpportunityId = testOpp.Id,
            CampaignId = testCampaign.Id,
            ContactId = testContact.Id,
            Influence = 80,
            ModelId = '03VBh000000AkKvMAK'
        );
        insert existingInfluence;
        
        Test.startTest();
        
        // Create another CampaignMember that would add 30% (total 110% - should not create)
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            ContactId = testContact.Id,
            Status = 'Responded'
        );
        insert cm;
        
        Test.stopTest();
        
        // Verify only the original CampaignInfluence exists
        List<CampaignInfluence> influences = [
            SELECT Id, Influence FROM CampaignInfluence 
            WHERE OpportunityId = :testOpp.Id
            ORDER BY CreatedDate
        ];
        
        System.assertEquals(1, influences.size(), 'Should not create additional CampaignInfluence if sum exceeds 100%');
        System.assertEquals(80, influences[0].Influence, 'Original influence should remain unchanged');
    }
    
    // Test case 8: Bulk CampaignMember processing
    @isTest
    static void testBulkCampaignMemberProcessing() {
        List<Campaign> campaigns = [SELECT Id FROM Campaign];
        List<Contact> contacts = [SELECT Id, AccountId FROM Contact WHERE AccountId != null];
        
        Test.startTest();
        
        // Create multiple CampaignMembers in bulk
        List<CampaignMember> cmList = new List<CampaignMember>();
        for (Integer i = 0; i < 50; i++) {
            cmList.add(new CampaignMember(
                CampaignId = campaigns[Math.mod(i, 2)].Id,
                ContactId = contacts[Math.mod(i, contacts.size())].Id,
                Status = 'Responded'
            ));
        }
        insert cmList;
        
        Test.stopTest();
        
        // Verify CampaignInfluence records were created (number depends on conditions)
        List<CampaignInfluence> influences = [SELECT Id FROM CampaignInfluence];
        System.assert(influences.size() > 0, 'Should create some CampaignInfluence records in bulk');
    }
    
    // Test case 9: Update CampaignMember to 'Responded' status
    @isTest
    static void testUpdateCampaignMemberToResponded() {
        Campaign testCampaign = [SELECT Id FROM Campaign WHERE Name = 'Test Campaign 0' LIMIT 1];
        Contact testContact = [SELECT Id, AccountId FROM Contact WHERE LastName = 'Contact 0' LIMIT 1];
        
        // Create CampaignMember with non-responded status first
        CampaignMember cm = new CampaignMember(
            CampaignId = testCampaign.Id,
            ContactId = testContact.Id,
            Status = 'Sent'
        );
        insert cm;
        
        Test.startTest();
        
        // Update to 'Responded' status
        cm.Status = 'Responded';
        update cm;
        
        Test.stopTest();
        
        // Verify CampaignInfluence was created on update
        List<CampaignInfluence> influences = [
            SELECT Id FROM CampaignInfluence 
            WHERE ContactId = :testContact.Id
        ];
        
        System.assertEquals(1, influences.size(), 'Should create CampaignInfluence when updated to Responded status');
    }
    
    // Test case 10: Mixed scenarios in bulk update
    @isTest
    static void testMixedBulkUpdate() {
        List<Campaign> campaigns = [SELECT Id FROM Campaign];
        List<Contact> contacts = [SELECT Id, AccountId FROM Contact WHERE AccountId != null];
        
        // Create CampaignMembers with various statuses
        List<CampaignMember> cmList = new List<CampaignMember>();
        for (Integer i = 0; i < 20; i++) {
            String status = (Math.mod(i, 2) == 0) ? 'Sent' : 'Responded';
            cmList.add(new CampaignMember(
                CampaignId = campaigns[Math.mod(i, 2)].Id,
                ContactId = contacts[Math.mod(i, contacts.size())].Id,
                Status = status
            ));
        }
        insert cmList;
        
        Test.startTest();
        
        // Update all to 'Responded'
        for (CampaignMember cm : cmList) {
            cm.Status = 'Responded';
        }
        update cmList;
        
        Test.stopTest();
        
        // Verify CampaignInfluence records were created for those that meet conditions
        List<CampaignInfluence> influences = [SELECT Id FROM CampaignInfluence];
        System.assert(influences.size() > 0, 'Should create CampaignInfluence records for valid updates');
    }
}














trigger CampaignMemberTrigger on CampaignMember (after insert, after update) {
    List<CampaignMember> cmList = new List<CampaignMember>();
    Set<Id> contactIds = new Set<Id>();
    
    // Step 1: Filter only responded CampaignMembers with ContactId
    for (CampaignMember cm : Trigger.new) {
        if (cm.Status == 'Responded' && cm.ContactId != null) {
            cmList.add(cm);
            contactIds.add(cm.ContactId);
        }
    }
    if (cmList.isEmpty()) return;
    // Step 2: Get Contact → AccountId
    Map<Id, Contact> contactMap = new Map<Id, Contact>(
        [SELECT Id, AccountId FROM Contact WHERE Id IN :contactIds]
    );
    Set<Id> accountIds = new Set<Id>();
    for (Contact c : contactMap.values()) {
        if (c.AccountId != null) {
            accountIds.add(c.AccountId);
        }
    }
    if (accountIds.isEmpty()) return;
    // Step 3: Get Opportunities from Accounts (with Stage = 'Build Value')
    Map<Id, List<Opportunity>> accountToOppsMap = new Map<Id, List<Opportunity>>();
    for (Opportunity opp : [
        SELECT Id, AccountId, StageName, CreatedDate
        FROM Opportunity
        WHERE AccountId IN :accountIds AND StageName = 'Build Value'  ]) {
        if (!accountToOppsMap.containsKey(opp.AccountId)) {  accountToOppsMap.put(opp.AccountId, new List<Opportunity>());
        }
        accountToOppsMap.get(opp.AccountId).add(opp);
    }
    if(accountToOppsMap.isEmpty()) return;

    // Step 4: Gather all Opportunity Ids to check existing Influence sum
    Set<Id> oppIds = new Set<Id>();
    for(List<Opportunity> oppList : accountToOppsMap.values()) {
        for(Opportunity opp : oppList) {
            oppIds.add(opp.Id);
        }
    }
    if(oppIds.isEmpty()) return;

    // Step 5: Fetch existing CampaignInfluence sums per Opportunity for the Model
    Map<Id, Decimal> oppToInfluenceSumMap = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT OpportunityId, SUM(Influence) totalInfluence
        FROM CampaignInfluence WHERE OpportunityId IN :oppIds AND ModelId = '03VBh000000AkKvMAK'
        GROUP BY OpportunityId
    ]) { oppToInfluenceSumMap.put((Id)ar.get('OpportunityId'), (Decimal)ar.get('totalInfluence'));
    }

    // Step 6: Prepare list to insert
    List<CampaignInfluence> toInsert = new List<CampaignInfluence>();

    for (CampaignMember cm : cmList) {
       Contact c = contactMap.get(cm.ContactId);
        if (c == null || c.AccountId == null || !accountToOppsMap.containsKey(c.AccountId)) continue;
        List<Opportunity> opps = accountToOppsMap.get(c.AccountId);
        for (Opportunity opp : opps) {
            Integer daysDiff = cm.CreatedDate.date().daysBetween(opp.CreatedDate.date());
            if (daysDiff >= 0 && daysDiff <= 90) {
                Decimal currentInfluenceSum = oppToInfluenceSumMap.containsKey(opp.Id) ? oppToInfluenceSumMap.get(opp.Id) : 0;
                // Check if adding 30 exceeds 100
                if (currentInfluenceSum + 30 <= 100) {
                    CampaignInfluence ci = new CampaignInfluence();  ci.OpportunityId = opp.Id; 
                    ci.CampaignId = cm.CampaignId;
                    ci.ContactId = cm.ContactId;
                    ci.Influence = 30;
                    ci.ModelId = '03VBh000000AkKvMAK';
                    toInsert.add(ci);

                    // Update the sum map to reflect this addition for subsequent iterations
                    oppToInfluenceSumMap.put(opp.Id, currentInfluenceSum + 30);
                } else {
                    // Skip inserting as influence would exceed 100%
                    System.debug('Skipping insert for Opportunity ' + opp.Id + ' as influence sum would exceed 100%. Current sum: ' + currentInfluenceSum);
                }
            }
        }
    }

    if (!toInsert.isEmpty()) {  try { insert toInsert;
        } catch (Exception e) { System.debug('Error inserting CampaignInfluence: ' + e.getMessage());
        }
    }
}


Write a test class for this in sfdc make sure you cover all cases, get more than 75 percent coverage
