@IsTest
public class PeopleControllerTest {
    
    @TestSetup
    static void setupTestData() {
        // Create test Chapter
        Chapter__c testChapter = new Chapter__c(Name = 'Test Chapter');
        insert testChapter;
        
        // Create test Hostel
        Hostel_Detail__c testHostel = new Hostel_Detail__c(Name = 'Test Hostel');
        insert testHostel;
        
        // Create test Contact
        Contact testContact = new Contact(
            FirstName = 'Test',
            LastName = 'User',
            Email = 'test.user@example.com',
            Chapter__c = testChapter.Id,
            Hostel__c = testHostel.Id
        );
        insert testContact;
        
        // Get Customer Community profile
        Profile communityProfile = [SELECT Id FROM Profile WHERE UserLicense.Name = 'Customer Community' LIMIT 1];
        
        // Create test User
        User testUser = new User(
            FirstName = 'Test',
            LastName = 'User',
            Email = 'test.user@example.com',
            Username = 'test.user@example.com' + System.currentTimeMillis(),
            Alias = 'tuser',
            TimeZoneSidKey = 'America/Los_Angeles',
            LocaleSidKey = 'en_US',
            EmailEncodingKey = 'UTF-8',
            ProfileId = communityProfile.Id,
            LanguageLocaleKey = 'en_US',
            ContactId = testContact.Id
        );
        insert testUser;
    }
    
    @IsTest
    static void testGetCustomerUsers() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        
        Test.startTest();
        System.runAs(testUser) {
            List<PeopleController.PeopleWrapper> result = PeopleController.getCustomerUsers();
            System.assertNotEquals(null, result, 'Should return a list of users');
            System.assert(result.size() <= 6, 'Should return at most 6 users');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testGetSearchUsers() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        Chapter__c testChapter = [SELECT Id FROM Chapter__c LIMIT 1];
        Hostel_Detail__c testHostel = [SELECT Id FROM Hostel_Detail__c LIMIT 1];
        
        Test.startTest();
        System.runAs(testUser) {
            // Test search with no filters
            List<PeopleController.PeopleWrapper> result1 = PeopleController.getSearchUsers('Test', null, null);
            System.assertNotEquals(null, result1, 'Should return search results');
            
            // Test search with chapter filter
            List<PeopleController.PeopleWrapper> result2 = PeopleController.getSearchUsers('Test', testChapter.Id, null);
            System.assertNotEquals(null, result2, 'Should return search results with chapter filter');
            
            // Test search with hostel filter
            List<PeopleController.PeopleWrapper> result3 = PeopleController.getSearchUsers('Test', null, testHostel.Id);
            System.assertNotEquals(null, result3, 'Should return search results with hostel filter');
            
            // Test search with both filters
            List<PeopleController.PeopleWrapper> result4 = PeopleController.getSearchUsers('Test', testChapter.Id, testHostel.Id);
            System.assertNotEquals(null, result4, 'Should return search results with both filters');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testFollowAndUnfollowUser() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        
        // Create a second user to follow
        Contact testContact2 = new Contact(
            FirstName = 'Test2',
            LastName = 'User2',
            Email = 'test2.user2@example.com'
        );
        insert testContact2;
        
        Profile communityProfile = [SELECT Id FROM Profile WHERE UserLicense.Name = 'Customer Community' LIMIT 1];
        
        User testUser2 = new User(
            FirstName = 'Test2',
            LastName = 'User2',
            Email = 'test2.user2@example.com',
            Username = 'test2.user2@example.com' + System.currentTimeMillis(),
            Alias = 'tuser2',
            TimeZoneSidKey = 'America/Los_Angeles',
            LocaleSidKey = 'en_US',
            EmailEncodingKey = 'UTF-8',
            ProfileId = communityProfile.Id,
            LanguageLocaleKey = 'en_US',
            ContactId = testContact2.Id
        );
        insert testUser2;
        
        Test.startTest();
        System.runAs(testUser) {
            // Test follow user
            PeopleController.followUser(testUser2.Id);
            
            // Verify follow was created
            List<EntitySubscription> subscriptions = [
                SELECT Id FROM EntitySubscription 
                WHERE SubscriberId = :testUser.Id AND ParentId = :testUser2.Id
            ];
            System.assertEquals(1, subscriptions.size(), 'Should have created a follow relationship');
            
            // Test unfollow user
            PeopleController.unfollowUser(testUser2.Id);
            
            // Verify unfollow worked
            subscriptions = [
                SELECT Id FROM EntitySubscription 
                WHERE SubscriberId = :testUser.Id AND ParentId = :testUser2.Id
            ];
            System.assertEquals(0, subscriptions.size(), 'Should have removed the follow relationship');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testGetHostels() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        
        Test.startTest();
        System.runAs(testUser) {
            List<PeopleController.HostelWrapper> result = PeopleController.getHostels();
            System.assertNotEquals(null, result, 'Should return a list of hostels');
            System.assertEquals(1, result.size(), 'Should return the test hostel');
            System.assertEquals('Test Hostel', result[0].hostelName, 'Should return the correct hostel name');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testGetChapters() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        
        Test.startTest();
        System.runAs(testUser) {
            List<PeopleController.ChapterWrapper> result = PeopleController.getChapters();
            System.assertNotEquals(null, result, 'Should return a list of chapters');
            System.assertEquals(1, result.size(), 'Should return the test chapter');
            System.assertEquals('Test Chapter', result[0].chapterName, 'Should return the correct chapter name');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testBuildWrappersFromUsers() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        List<User> users = [SELECT Id, Name, SmallPhotoUrl, ContactId, Contact.Name, 
                            Contact.Chapter__c, Contact.Chapter__r.Name,
                            Contact.Hostel__c, Contact.Hostel__r.Name
                            FROM User WHERE Id = :testUser.Id];
        
        Test.startTest();
        System.runAs(testUser) {
            List<PeopleController.PeopleWrapper> result = PeopleController.buildWrappersFromUsers(users);
            System.assertNotEquals(null, result, 'Should return a list of wrapped users');
            System.assertEquals(1, result.size(), 'Should return the test user');
            System.assertEquals('Test User', result[0].contactName, 'Should return the correct contact name');
            System.assertEquals('Test Chapter', result[0].chapterName, 'Should return the correct chapter name');
            System.assertEquals(1, result[0].hostelNames.size(), 'Should return hostel names');
            System.assertEquals('Test Hostel', result[0].hostelNames[0], 'Should return the correct hostel name');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testEmptyBuildWrappersFromUsers() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        
        Test.startTest();
        System.runAs(testUser) {
            List<PeopleController.PeopleWrapper> result = PeopleController.buildWrappersFromUsers(new List<User>());
            System.assertNotEquals(null, result, 'Should return an empty list');
            System.assertEquals(0, result.size(), 'Should return no users');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testFollowSelfShouldNotWork() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        
        Test.startTest();
        System.runAs(testUser) {
            // Try to follow self
            PeopleController.followUser(testUser.Id);
            
            // Verify no follow was created
            List<EntitySubscription> subscriptions = [
                SELECT Id FROM EntitySubscription 
                WHERE SubscriberId = :testUser.Id AND ParentId = :testUser.Id
            ];
            System.assertEquals(0, subscriptions.size(), 'Should not allow following yourself');
        }
        Test.stopTest();
    }
    
    @IsTest
    static void testUnfollowNonExistentShouldNotFail() {
        User testUser = [SELECT Id FROM User WHERE Username LIKE 'test.user@example.com%' LIMIT 1];
        
        Test.startTest();
        System.runAs(testUser) {
            // Try to unfollow a user that doesn't exist
            try {
                PeopleController.unfollowUser(null);
                System.assert(true, 'Should handle null user ID gracefully');
            } catch (Exception e) {
                System.assert(false, 'Should not throw exception for null user ID: ' + e.getMessage());
            }
        }
        Test.stopTest();
    }
}