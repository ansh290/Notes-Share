Id IN :accountIds AND StageName = 'Build Value'  ]) {
        if (!accountToOppsMap.containsKey(opp.AccountId)) {  accountToOppsMap.put(opp.AccountId, new List<Opportunity>());
        }
        accountToOppsMap.get(opp.AccountId).add(opp);
    }
    if(accountToOppsMap.isEmpty()) return;

    // Step 4: Gather all Opportunity Ids to check existing Influence sum
    Set<Id> oppIds = new Set<Id>();
    for(List<Opportunity> oppList : accountToOppsMap.values()) {
        for(Opportunity opp : oppList) {
            oppIds.add(opp.Id);
        }
    }
    if(oppIds.isEmpty()) return;

    // Step 5: Fetch existing CampaignInfluence sums per Opportunity for the Model
    Map<Id, Decimal> oppToInfluenceSumMap = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT OpportunityId, SUM(Influence) totalInfluence
        FROM CampaignInfluence WHERE OpportunityId IN :oppIds AND ModelId = '03VBh000000AkKvMAK'
        GROUP BY OpportunityId
    ]) { oppToInfluenceSumMap.put((Id)ar.get('OpportunityId'), (Decimal)ar.get('totalInfluence'));
    }

    // Step 6: Prepare list to insert
    List<CampaignInfluence> toInsert = new List<CampaignInfluence>();

    for (CampaignMember cm : cmList) {
       Contact c = contactMap.get(cm.ContactId);
        if (c == null || c.AccountId == null || !accountToOppsMap.containsKey(c.AccountId)) continue;
        List<Opportunity> opps = accountToOppsMap.get(c.AccountId);
        for (Opportunity opp : opps) {
            Integer daysDiff = cm.CreatedDate.date().daysBetween(opp.CreatedDate.date());
            if (daysDiff >= 0 && daysDiff <= 90) {
                Decimal currentInfluenceSum = oppToInfluenceSumMap.containsKey(opp.Id) ? oppToInfluenceSumMap.get(opp.Id) : 0;
                // Check if adding 30 exceeds 100
                if (currentInfluenceSum + 30 <= 100) {
                    CampaignInfluence ci = new CampaignInfluence();  ci.OpportunityId = opp.Id; 
                    ci.CampaignId = cm.CampaignId;
                    ci.ContactId = cm.ContactId;
                    ci.Influence = 30;
                    ci.ModelId = '03VBh000000AkKvMAK';
                    toInsert.add(ci);

                    // Update the sum map to reflect this addition for subsequent iterations
                    oppToInfluenceSumMap.put(opp.Id, currentInfluenceSum + 30);
                } else {
                    // Skip inserting as influence would exceed 100%
                    System.debug('Skipping insert for Opportunity ' + opp.Id + ' as influence sum would exceed 100%. Current sum: ' + currentInfluenceSum);
                }
            }
        }
    }

    if (!toInsert.isEmpty()) {  try { insert toInsert;
        } catch (Exception e) { System.debug('Error inserting CampaignInfluence: ' + e.getMessage());

this part of code is not running, see you have to somehow make it test it because currently i am only getting 33% which is very less.
all your test cases are failing, maybe change your approach but think deep and cover it somehow we gotta get more than 75 















trigger CampaignMemberTrigger on CampaignMember (after insert, after update) {
    List<CampaignMember> cmList = new List<CampaignMember>();
    Set<Id> contactIds = new Set<Id>();
    
    // Step 1: Filter only responded CampaignMembers with ContactId
    for (CampaignMember cm : Trigger.new) {
        if (cm.Status == 'Responded' && cm.ContactId != null) {
            cmList.add(cm);
            contactIds.add(cm.ContactId);
        }
    }
    if (cmList.isEmpty()) return;
    // Step 2: Get Contact â†’ AccountId
    Map<Id, Contact> contactMap = new Map<Id, Contact>(
        [SELECT Id, AccountId FROM Contact WHERE Id IN :contactIds]
    );
    Set<Id> accountIds = new Set<Id>();
    for (Contact c : contactMap.values()) {
        if (c.AccountId != null) {
            accountIds.add(c.AccountId);
        }
    }
    if (accountIds.isEmpty()) return;
    // Step 3: Get Opportunities from Accounts (with Stage = 'Build Value')
    Map<Id, List<Opportunity>> accountToOppsMap = new Map<Id, List<Opportunity>>();
    for (Opportunity opp : [
        SELECT Id, AccountId, StageName, CreatedDate
        FROM Opportunity
        WHERE AccountId IN :accountIds AND StageName = 'Build Value'  ]) {
        if (!accountToOppsMap.containsKey(opp.AccountId)) {  accountToOppsMap.put(opp.AccountId, new List<Opportunity>());
        }
        accountToOppsMap.get(opp.AccountId).add(opp);
    }
    if(accountToOppsMap.isEmpty()) return;

    // Step 4: Gather all Opportunity Ids to check existing Influence sum
    Set<Id> oppIds = new Set<Id>();
    for(List<Opportunity> oppList : accountToOppsMap.values()) {
        for(Opportunity opp : oppList) {
            oppIds.add(opp.Id);
        }
    }
    if(oppIds.isEmpty()) return;

    // Step 5: Fetch existing CampaignInfluence sums per Opportunity for the Model
    Map<Id, Decimal> oppToInfluenceSumMap = new Map<Id, Decimal>();
    for (AggregateResult ar : [
        SELECT OpportunityId, SUM(Influence) totalInfluence
        FROM CampaignInfluence WHERE OpportunityId IN :oppIds AND ModelId = '03VBh000000AkKvMAK'
        GROUP BY OpportunityId
    ]) { oppToInfluenceSumMap.put((Id)ar.get('OpportunityId'), (Decimal)ar.get('totalInfluence'));
    }

    // Step 6: Prepare list to insert
    List<CampaignInfluence> toInsert = new List<CampaignInfluence>();

    for (CampaignMember cm : cmList) {
       Contact c = contactMap.get(cm.ContactId);
        if (c == null || c.AccountId == null || !accountToOppsMap.containsKey(c.AccountId)) continue;
        List<Opportunity> opps = accountToOppsMap.get(c.AccountId);
        for (Opportunity opp : opps) {
            Integer daysDiff = cm.CreatedDate.date().daysBetween(opp.CreatedDate.date());
            if (daysDiff >= 0 && daysDiff <= 90) {
                Decimal currentInfluenceSum = oppToInfluenceSumMap.containsKey(opp.Id) ? oppToInfluenceSumMap.get(opp.Id) : 0;
                // Check if adding 30 exceeds 100
                if (currentInfluenceSum + 30 <= 100) {
                    CampaignInfluence ci = new CampaignInfluence();  ci.OpportunityId = opp.Id; 
                    ci.CampaignId = cm.CampaignId;
                    ci.ContactId = cm.ContactId;
                    ci.Influence = 30;
                    ci.ModelId = '03VBh000000AkKvMAK';
                    toInsert.add(ci);

                    // Update the sum map to reflect this addition for subsequent iterations
                    oppToInfluenceSumMap.put(opp.Id, currentInfluenceSum + 30);
                } else {
                    // Skip inserting as influence would exceed 100%
                    System.debug('Skipping insert for Opportunity ' + opp.Id + ' as influence sum would exceed 100%. Current sum: ' + currentInfluenceSum);
                }
            }
        }
    }

    if (!toInsert.isEmpty()) {  try { insert toInsert;
        } catch (Exception e) { System.debug('Error inserting CampaignInfluence: ' + e.getMessage());
        }
    }
}


Write a test class for this in sfdc make sure you cover all cases, get more than 75 percent coverage
